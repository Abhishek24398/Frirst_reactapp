{"version":3,"sources":["components/NavigationBar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Styles","styled","div","NavigationBar","props","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","text","setText","textarea","setTextArea","className","Navbar","bg","mode","expand","Container","Brand","href","Toggle","Collapse","id","Nav","Link","to","Form","Check","onClick","toggleMode","type","label","Group","controlId","Label","Control","as","style","value","onChange","event","console","log","target","placeholder","rows","Button","newText","toUpperCase","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","Alert","alert","role","word","lower","toLowerCase","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","body","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b133f2c2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport { Container, Nav, Navbar, Button, Form } from 'react-bootstrap';\r\nimport styled from 'styled-components'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nconst Styles = styled.div`\r\n    .navbar-light .navbar-nav .nav-link {\r\n        color: #000;\r\n\r\n        &:hover{\r\n            color:  #0d6efd;\r\n        }\r\n    }\r\n    .navbar-brand{\r\n        color: #000;\r\n    }\r\n    .navbar{\r\n        width: 100%;\r\n        padding-top:0;\r\n    }\r\n\r\n    .btn{\r\n        padding: 0.375rem 1.75rem;\r\n        margin: 0px 4px;\r\n\r\n        &:hover{\r\n            background-color:#000;\r\n        }\r\n    }\r\n    .form{\r\n        margin:auto;\r\n    }\r\n\r\n    textarea{\r\n        width:100%;\r\n        resize:auto;\r\n    }\r\n    .form-control{\r\n        width:1150px;\r\n        height:200px;\r\n    }\r\n    .navbar-nav a{\r\n        display: block;\r\n        padding: .5rem 1rem;\r\n        color: #0d6efd;\r\n        text-decoration: none;\r\n    }\r\n`;\r\nfunction NavigationBar(props) {\r\n\r\n    // let myStyle = {\r\n    //     color: 'white',\r\n    //     backgroundColor: 'black'\r\n    // }\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n    const [btntext, setBtnText] = useState(\"Dark\")\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText(\"Light\")\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Dark\")\r\n        }\r\n    }\r\n    const handleUpClick = () => {\r\n        console.log(\"Changed\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        setTextArea(\"ToLowerCase\")\r\n        props.showAlert(\"converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"Changed\");\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"Enter Your Text\");\r\n    const [textarea, setTextArea] = useState(\"ToUpperCase\");\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const removeExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Space!\", \"success\");\r\n\r\n    }\r\n\r\n    const deleteText = () => {\r\n        let newText = (\" \")\r\n        setText(newText)\r\n        props.showAlert(\"Cleared!\", \"success\");\r\n    }\r\n\r\n    return (\r\n        <Styles>\r\n            <div className=\"navbar\">\r\n                <Navbar bg={`${props.mode}`} expand=\"lg\" >\r\n                    <Container>\r\n                        <Navbar.Brand href=\"/\" className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>React-Bootstrap</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"me-auto\">\r\n                                <Nav.Link to=\"/about\" className={`text-${props.mode === 'light' ? 'dark' : 'light'}`} >About</Nav.Link>\r\n                                <Nav.Link to=\"/contact\" className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}>Contact Us</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                        <Form>\r\n                            <Form.Check\r\n                                onClick={props.toggleMode}\r\n                                type=\"switch\"\r\n                                id=\"custom-switch\"\r\n                                label=\"Enable Dark Mode\"\r\n                                className={`text-${props.mode === 'light' ? 'dark' : 'light'}`}\r\n                            />\r\n                        </Form>\r\n                    </Container>\r\n                </Navbar>\r\n                <Container>\r\n                    <Form className=\"form\" >\r\n                        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Example textarea</Form.Label>\r\n                            <Form.Control as=\"textarea\" id=\"mybox\" style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} value={text} onChange={handleOnChange} placeholder=\"Hi There!!...\" rows={3} />\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Container>\r\n            </div>\r\n            <Container>\r\n                <Button onClick={handleUpClick}>{textarea}</Button>\r\n                <Button onClick={toggleStyle}>{btntext}</Button>\r\n                <Button onClick={handleCopy}>Copy Text</Button>\r\n                <Button onClick={removeExtraSpaces}>Remove Extra Spaces</Button>\r\n                <Button onClick={deleteText}>CLear Text</Button>\r\n            </Container>\r\n\r\n        </Styles>\r\n    )\r\n}\r\n\r\nexport default NavigationBar\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Styles = styled.div`\r\n    .alert{\r\n        position:absolute;\r\n        right: 15px;\r\n        top: 50px;\r\n        width: 25vw;\r\n        height: 15vh;\r\n    }\r\n`;\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <Styles>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n            </div>\r\n        </Styles>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport NavigationBar from './components/NavigationBar';\nimport { useState } from 'react';\nimport Alert from './components/Alert'\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');//Wheather darkMode is Enabled Or no\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      document.title = \"TextUtils ~ Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils ~ Dark Mode is Amazing \";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"TextUtils ~ Install\";\n      // }, 1500);\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode Enabled\", \"success\");\n      document.title = \"TextUtils ~ Light Mode\";\n    }\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  return (\n    <>\n      {/* <Router>\n        <Switch>\n          <Route excat path=\"/contact\">\n            <Contact />\n          </Route> */}\n      {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n      {/* <Route path=\"/\"> */}\n      <NavigationBar mode={mode} toggleMode={toggleMode} title=\"Dropdown\" showAlert={showAlert} />\n      <Alert alert={alert} />\n      {/* </Route>\n        </Switch>\n      </Router> */}\n    </ >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}